<%- include('partials/header') %>

<div class="animate-fadeIn">
  <h1 class="text-3xl font-bold text-center my-5">ðŸ§² Physics Charge Puzzle Game</h1>
  <div class="max-w-3xl mx-auto bg-white rounded-lg shadow-md p-6 mb-6">
    <div id="description" class="mb-6 text-gray-700 text-center">
      <p class="mb-3">
        Click to place alternating <strong class="text-blue-600">positive</strong> and <strong class="text-red-600">negative</strong> charges.<br>
        The charged ball will respond according to Coulomb's Law and other forces.<br>
        Your goal: Guide the ball to the <span class="text-green-600 font-semibold">green goal</span> without hitting the <span class="text-red-600 font-semibold">lava</span>!
      </p>
      <p>
        Additional physics elements like gravity, wind, springs, and lava are included to make the game fun and educational!
      </p>
    </div>
    <div class="flex justify-center space-x-4 mb-6">
      <button onclick="startGame()" class="btn btn-primary py-2 px-6">
        <i class="fas fa-play mr-2"></i> Start
      </button>
      <button onclick="stopGame()" class="btn btn-secondary py-2 px-6">
        <i class="fas fa-pause mr-2"></i> Stop
      </button>
      <button onclick="resetGame()" class="btn btn-danger py-2 px-6">
        <i class="fas fa-redo mr-2"></i> Reset
      </button>
    </div>
    <div class="flex justify-center">
      <canvas id="gameCanvas" width="800" height="500" class="border-2 border-gray-700 bg-white"></canvas>
    </div>
  </div>
  
  <div class="text-center mt-6 mb-10">
    <a href="/dashboard" class="btn btn-secondary inline-flex items-center">
      <i class="fas fa-arrow-left mr-2"></i> Back to Dashboard
    </a>
  </div>
</div>

<script>
  const canvas = document.getElementById("gameCanvas");
  const ctx = canvas.getContext("2d");

  let charges = [];
  let ball = { x: 50, y: 250, vx: 0, vy: 0, charge: 1 };
  let placingPositive = true;
  let gameRunning = false;
  let goal = { x: 740, y: 230, width: 40, height: 40 };
  let gravityZones = [{ x: 400, y: 200, r: 50 }];
  let windZones = [{ x: 200, y: 100, w: 100, h: 300, direction: 1 }];
  let springs = [{ x: 600, y: 400, w: 30, h: 10 }];
  let lavaZones = [{ x: 300, y: 300, w: 80, h: 20 }];

  canvas.addEventListener("click", function (e) {
    if (!gameRunning) return;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    charges.push({ x, y, charge: placingPositive ? 1 : -1 });
    placingPositive = !placingPositive;
  });

  function resetGame() {
    ball = { x: 50, y: 250, vx: 1, vy: 0, charge: 1 };
    charges = [];
    placingPositive = true;
    draw();
  }

  function stopGame() {
    gameRunning = false;
  }

  function startGame() {
    if (!gameRunning) {
      gameRunning = true;
      requestAnimationFrame(update);
    }
  }

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Goal
    ctx.fillStyle = "green";
    ctx.fillRect(goal.x, goal.y, goal.width, goal.height);

    // Gravity Zones
    gravityZones.forEach(z => {
      ctx.beginPath();
      ctx.arc(z.x, z.y, z.r, 0, 2 * Math.PI);
      ctx.fillStyle = "#cce5ff";
      ctx.fill();
    });

    // Wind Zones
    windZones.forEach(z => {
      ctx.fillStyle = "#f0f8ff";
      ctx.fillRect(z.x, z.y, z.w, z.h);
    });

    // Lava
    lavaZones.forEach(l => {
      ctx.fillStyle = "red";
      ctx.fillRect(l.x, l.y, l.w, l.h);
    });

    // Springs
    springs.forEach(s => {
      ctx.fillStyle = "orange";
      ctx.fillRect(s.x, s.y, s.w, s.h);
    });

    // Charges
    charges.forEach(c => {
      ctx.beginPath();
      ctx.arc(c.x, c.y, 8, 0, 2 * Math.PI);
      ctx.fillStyle = c.charge > 0 ? "blue" : "red";
      ctx.fill();
    });

    // Ball
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, 10, 0, 2 * Math.PI);
    ctx.fillStyle = "black";
    ctx.fill();
  }

  function update() {
    if (!gameRunning) return;

    let fx = 0, fy = 0;
    charges.forEach(c => {
      let dx = c.x - ball.x;
      let dy = c.y - ball.y;
      let distSq = dx * dx + dy * dy;
      if (distSq > 25) {
        let force = (c.charge * ball.charge) / distSq;
        let angle = Math.atan2(dy, dx);
        fx += force * Math.cos(angle);
        fy += force * Math.sin(angle);
      }
    });

    // Gravity Zone
    gravityZones.forEach(z => {
      let dx = z.x - ball.x;
      let dy = z.y - ball.y;
      let dist = Math.sqrt(dx * dx + dy * dy);
      if (dist < z.r) {
        fx += 0.3 * dx / dist;
        fy += 0.3 * dy / dist;
      }
    });

    // Wind Zones
    windZones.forEach(z => {
      if (
        ball.x > z.x && ball.x < z.x + z.w &&
        ball.y > z.y && ball.y < z.y + z.h
      ) {
        fx += 0.05 * z.direction;
      }
    });

    // Lava check
    for (let l of lavaZones) {
      if (
        ball.x > l.x && ball.x < l.x + l.w &&
        ball.y > l.y && ball.y < l.y + l.h
      ) {
        alert("ðŸ”¥ Game Over! You hit lava.");
        resetGame();
        return;
      }
    }

    // Spring bounce
    for (let s of springs) {
      if (
        ball.x > s.x && ball.x < s.x + s.w &&
        ball.y + 10 > s.y && ball.y < s.y + s.h
      ) {
        ball.vy = -2;
      }
    }

    ball.vx += fx;
    ball.vy += fy + 0.01; // reduced gravity
    ball.x += ball.vx;
    ball.y += ball.vy;

    // Simple ground bounce
    if (ball.y > canvas.height - 10) {
      ball.y = canvas.height - 10;
      ball.vy *= -0.5;
    }

    // Win check
    if (
      ball.x > goal.x && ball.x < goal.x + goal.width &&
      ball.y > goal.y && ball.y < goal.y + goal.height
    ) {
      alert("ðŸŽ‰ You Win!");
      resetGame();
      return;
    }

    draw();
    requestAnimationFrame(update);
  }

  // Initialize the game
  draw();
</script>

<%- include('partials/footer') %> 